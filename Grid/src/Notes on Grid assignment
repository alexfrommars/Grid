0 to length minus 4 or 4 to length
4 for loops
a max
every time a product is greater than the max set the max to that value and at the of the loops you should have the greatest product

do all in the main method.

int grid (int[,] grid)
     {
		int result = 0;


   		for (int i1 = 0; i1 < grid.GetLength(0); i1++)
   		{
      		for (int j1 = 3; j1 < grid.GetLength(1); j1++)
         	result = Math.Max(result, (grid[i1, j1] * grid[i1, j1 - 1] * grid[i1, j1 - 2] * grid[i1, j1 - 3]));
   		}

   		// Vertical.
   		for (int j2 = 0; j2 < grid.GetLength(0); j2++)
   		{
      		for (int i2 = 3; i2 < grid.GetLength(1); i2++)
         	result = Math.Max(result, (grid[i2, j2] * grid[i2 - 1, j2] * grid[i2 - 2, j2] * grid[i2 - 3, j2]));
   		}

   		// Diagonal (down-right -> up-left).
   		for (int i3 = 3; i3 < grid.GetLength(0); i3++)
   		{
      		for (int j3 = 3; j3 < grid.GetLength(1); j3++)
         	result = Math.Max(result, (grid[i3, j3] * grid[i3 - 1, j3 - 1] * grid[i3 - 2, j3 - 2] * grid[i3 - 3, j3 - 3]));
   		}

   		// Diagonal (up-left -> down-right).
   		for (int i4 = 3; i4 < grid.GetLength(0); i4++)
   		{
      		for (int j4 = 0; j4 < grid.GetLength(1) - 3; j4++)
         	result = Math.Max(result,(grid[i4, j4] * grid[i4 - 1, j4 + 1] * grid[i4 - 2, j4 + 2] * grid[i4 - 3, j4 + 3]));
   		}
   	return result;
   }

   public static Integer parseInt(String s)
	{
    if(s == null || s.isEmpty()) 
        return 0;
    else
        return Integer.parseInt(s);
	}